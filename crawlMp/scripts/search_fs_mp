#!/usr/bin/env python3
import argparse
import multiprocessing
import os
import sys

from crawlMp.constants import *
from crawlMp.snippets.output import print_summary, print_list
from crawlMp.sources.crawlMp import CrawlMp
from crawlMp.sources.fileCrawler import FileSearchCrawler
from crawlMp.sources.results import Results

description = [
    "MultiProcess recursive file search.",
    "Default starting location is Current Working Directory.",
    "",
    "Usage examples:",
    "  Search for all .zip files:",
    "  search_fs_mp \.zip$",
    "",
    "  Get all .zip files in different directories:",
    "  search_fs_mp \.zip$ -l /home /usr/share",
    "",
    "  Show search summary:",
    "  search_fs_mp \.zip$ -l /home /usr/share -o Summary",
    "",
]

arguments = sys.argv
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description="\r\n".join(description)
)
parser.add_argument("pattern", default=".", type=str, help="RegExp filename pattern to search for")
parser.add_argument("-l", "--links", type=str, nargs="+",
                    help="Entry points to start search. Multiple entrypoints may be specified.", default=[os.getcwd()])
parser.add_argument("-o", "--output", default=[OUTPUT_LIST], type=str, nargs="+", choices=[OUTPUT_SUMMARY, OUTPUT_LIST],
                    help=f"Entry points to start search")
parser.add_argument("-np", "--processes", default=multiprocessing.cpu_count(), type=int,
                    help="Number of processes used, minimum is 1")
parser.add_argument("-bs", "--buffer_size", default=96, type=int, help="Buffer links size, only used if processes > 1")
args = parser.parse_args()


def on_done(crawler_results: Results) -> None:
    for output_mode in args.output:
        if output_mode == OUTPUT_SUMMARY:
            print_summary(crawler_results)
        elif output_mode == OUTPUT_LIST:
            print_list(crawler_results)


CrawlMp(FileSearchCrawler, links=args.links, num_proc=args.processes, buffer_size=args.buffer_size,
        pattern=args.pattern).start(on_done)
